"use strict";
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common = require("../common");
var _ = require("lodash");
var Promise = require("bluebird");
var co = Promise.coroutine;
var Keychains = function (bitgo, baseCoin) {
    this.bitgo = bitgo;
    this.baseCoin = baseCoin;
};
Keychains.prototype.get = function (params, callback) {
    params = params || {};
    common.validateParams(params, [], ['xpub', 'ethAddress'], callback);
    if (!params.id) {
        throw new Error('id must be defined');
    }
    var id = params.id;
    if (params.reqId) {
        this.bitgo._reqId = params.reqId;
    }
    return this.bitgo.get(this.baseCoin.url('/key/' + encodeURIComponent(id)))
        .result()
        .nodeify(callback);
};
/**
 * list the users keychains
 * @param params.limit - Max number of results in a single call.
 * @param params.prevId - Continue iterating (provided by nextBatchPrevId in the previous list)
 * @param callback
 * @returns {*}
 */
Keychains.prototype.list = function (params, callback) {
    return co(function () {
        var queryObject;
        return __generator(this, function (_a) {
            params = params || {};
            common.validateParams(params, [], [], callback);
            queryObject = {};
            if (!_.isUndefined(params.limit)) {
                if (!_.isNumber(params.limit)) {
                    throw new Error('invalid limit argument, expecting number');
                }
                queryObject.limit = params.limit;
            }
            if (!_.isUndefined(params.prevId)) {
                if (!_.isString(params.prevId)) {
                    throw new Error('invalid prevId argument, expecting string');
                }
                queryObject.prevId = params.prevId;
            }
            return [2 /*return*/, this.bitgo.get(this.baseCoin.url('/key')).query(queryObject).result()];
        });
    }).call(this).asCallback(callback);
};
/**
 * Change the decryption password for all possible keychains associated with a user.
 *
 * This function iterates through all keys associated with the user, decrypts
 * them with the old password and re-encrypts them with the new password.
 *
 * This should be called when a user changes their login password, and are expecting
 * that their wallet passwords are changed to match the new login password.
 *
 * @param params.oldPassword - The old password used for encrypting the key
 * @param params.newPassword - The new password to be used for encrypting the key
 * @param callback
 * @returns changedKeys Object - e.g.:
 *  {
 *    xpub1: encryptedPrv,
 *    ...
 *  }
 */
Keychains.prototype.updatePassword = function (params, callback) {
    return co(function () {
        var changedKeys, prevId, keysLeft, result, _i, _a, key, oldEncryptedPrv, updatedKeychain;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    common.validateParams(params, ['oldPassword', 'newPassword'], [], callback);
                    changedKeys = {};
                    keysLeft = true;
                    _b.label = 1;
                case 1:
                    if (!keysLeft) return [3 /*break*/, 3];
                    return [4 /*yield*/, this.list({ limit: 500, prevId: prevId })];
                case 2:
                    result = _b.sent();
                    for (_i = 0, _a = result.keys; _i < _a.length; _i++) {
                        key = _a[_i];
                        oldEncryptedPrv = key.encryptedPrv;
                        if (_.isUndefined(oldEncryptedPrv)) {
                            continue;
                        }
                        try {
                            updatedKeychain = this.changeSingleKeychainPassword({
                                keychain: key,
                                oldPassword: params.oldPassword,
                                newPassword: params.newPassword
                            });
                            changedKeys[updatedKeychain.pub] = updatedKeychain.encryptedPrv;
                        }
                        catch (e) {
                            // catching an error here means that the password was incorrect and hence there is nothing to change
                        }
                    }
                    if (result.nextBatchPrevId) {
                        prevId = result.nextBatchPrevId;
                    }
                    else {
                        keysLeft = false;
                    }
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/, changedKeys];
            }
        });
    }).call(this).asCallback(callback);
};
/**
 * Update the password used to decrypt a single keychain
 * @param keychain - The keychain whose password should be updated
 * @param oldPassword - The old password used for encrypting the key
 * @param newPassword - The new password to be used for encrypting the key
 * @param callback
 * @returns {object}
 */
Keychains.prototype.updateSingleKeychainPassword = function (_a) {
    var keychain = _a.keychain, oldPassword = _a.oldPassword, newPassword = _a.newPassword;
    if (!_.isString(oldPassword)) {
        throw new Error('expected old password to be a string');
    }
    if (!_.isString(newPassword)) {
        throw new Error('expected new password to be a string');
    }
    if (!_.isObject(keychain) || !_.isString(keychain.encryptedPrv)) {
        throw new Error('expected keychain to be an object with an encryptedPrv property');
    }
    var oldEncryptedPrv = keychain.encryptedPrv;
    try {
        var decryptedPrv = this.bitgo.decrypt({ input: oldEncryptedPrv, password: oldPassword });
        var newEncryptedPrv = this.bitgo.encrypt({ input: decryptedPrv, password: newPassword });
        return _.assign({}, keychain, { encryptedPrv: newEncryptedPrv });
    }
    catch (e) {
        // catching an error here means that the password was incorrect and hence there is nothing to change
        throw new Error('password used to decrypt keychain private key is incorrect');
    }
};
Keychains.prototype.create = function (params) {
    params = params || {};
    common.validateParams(params, [], []);
    return this.baseCoin.generateKeyPair(params.seed);
};
Keychains.prototype.add = function (params, callback) {
    params = params || {};
    common.validateParams(params, [], ['pub', 'encryptedPrv', 'type', 'source', 'originalPasscodeEncryptionCode', 'enterprise', 'derivedFromParentWithSeed'], callback);
    if (!_.isUndefined(params.disableKRSEmail)) {
        if (!_.isBoolean(params.disableKRSEmail)) {
            throw new Error('invalid disableKRSEmail argument, expecting boolean');
        }
    }
    if (params.reqId) {
        this.bitgo._reqId = params.reqId;
    }
    return this.bitgo.post(this.baseCoin.url('/key'))
        .send({
        pub: params.pub,
        encryptedPrv: params.encryptedPrv,
        type: params.type,
        source: params.source,
        provider: params.provider,
        originalPasscodeEncryptionCode: params.originalPasscodeEncryptionCode,
        enterprise: params.enterprise,
        derivedFromParentWithSeed: params.derivedFromParentWithSeed,
        disableKRSEmail: params.disableKRSEmail,
        krsSpecific: params.krsSpecific
    })
        .result()
        .nodeify(callback);
};
Keychains.prototype.createBitGo = function (params, callback) {
    params = params || {};
    common.validateParams(params, [], [], callback);
    params.source = 'bitgo';
    this.baseCoin.preCreateBitGo(params);
    return this.add(params, callback);
};
Keychains.prototype.createBackup = function (params, callback) {
    return co(function () {
        var key, serverResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = params || {};
                    common.validateParams(params, [], ['provider'], callback);
                    params.source = 'backup';
                    if (!params.provider) {
                        key = this.create();
                        _.extend(params, key);
                    }
                    return [4 /*yield*/, this.add(params, callback)];
                case 1:
                    serverResponse = _a.sent();
                    return [2 /*return*/, _.extend({}, serverResponse, _.pick(params, ['prv', 'encryptedPrv', 'provider', 'source']))];
            }
        });
    }).call(this).asCallback(callback);
};
module.exports = Keychains;
//# sourceMappingURL=keychains.js.map