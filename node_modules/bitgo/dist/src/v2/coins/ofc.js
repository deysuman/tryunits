"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BaseCoin = require('../baseCoin');
var crypto = require("crypto");
var bitGoUtxoLib = require('bitgo-utxo-lib');
var Ofc = /** @class */ (function (_super) {
    __extends(Ofc, _super);
    function Ofc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Ofc.prototype.getChain = function () {
        return 'ofc';
    };
    /**
     * Generate secp256k1 key pair
     *
     * @param seed
     * @returns {Object} object with generated pub and prv
     */
    Ofc.prototype.generateKeyPair = function (seed) {
        if (!seed) {
            // An extended private key has both a normal 256 bit private key and a 256
            // bit chain code, both of which must be random. 512 bits is therefore the
            // maximum entropy and gives us maximum security against cracking.
            seed = crypto.randomBytes(512 / 8);
        }
        var extendedKey = bitGoUtxoLib.HDNode.fromSeedBuffer(seed);
        var xpub = extendedKey.neutered().toBase58();
        return {
            pub: xpub,
            prv: extendedKey.toBase58()
        };
    };
    Ofc.prototype.getFamily = function () {
        return 'ofc';
    };
    Ofc.prototype.getFullName = function () {
        return 'Offchain';
    };
    /**
     * Return whether the given m of n wallet signers/ key amounts are valid for the coin
     */
    Ofc.prototype.isValidMofNSetup = function (_a) {
        var m = _a.m, n = _a.n;
        return m === 1 && n === 1;
    };
    /**
     * Return boolean indicating whether input is valid public key for the coin.
     *
     * @param {String} pub the pub to be checked
     * @returns {Boolean} is it valid?
     */
    Ofc.prototype.isValidPub = function (pub) {
        try {
            bitGoUtxoLib.HDNode.fromBase58(pub);
            return true;
        }
        catch (e) {
            return false;
        }
    };
    return Ofc;
}(BaseCoin));
module.exports = Ofc;
//# sourceMappingURL=ofc.js.map