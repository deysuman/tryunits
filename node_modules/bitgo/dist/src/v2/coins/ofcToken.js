var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var Ofc = require('./ofc');
var OFCToken = /** @class */ (function (_super) {
    __extends(OFCToken, _super);
    function OFCToken(tokenConfig) {
        var _this = _super.call(this) || this;
        _this.tokenConfig = tokenConfig;
        _this.type = tokenConfig.type;
        return _this;
    }
    Object.defineProperty(OFCToken.prototype, "coin", {
        get: function () {
            return this.tokenConfig.coin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFCToken.prototype, "decimalPlaces", {
        get: function () {
            return this.tokenConfig.decimalPlaces;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFCToken.prototype, "name", {
        get: function () {
            return this.tokenConfig.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFCToken.prototype, "backingCoin", {
        get: function () {
            return this.tokenConfig.backingCoin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFCToken.prototype, "isFiat", {
        get: function () {
            return this.tokenConfig.isFiat;
        },
        enumerable: true,
        configurable: true
    });
    OFCToken.prototype.getChain = function () {
        return this.type;
    };
    OFCToken.prototype.getFullName = function () {
        return this.name;
    };
    OFCToken.prototype.getBaseFactor = function () {
        return String(Math.pow(10, this.decimalPlaces));
    };
    /**
     * Flag for sending value of 0
     * @returns {boolean} True if okay to send 0 value, false otherwise
     */
    OFCToken.prototype.valuelessTransferAllowed = function () {
        return false;
    };
    OFCToken.generateToken = function (config) {
        return OFCToken.bind(null, config);
    };
    /**
     * Assemble keychain and half-sign prebuilt transaction
     * @param params
     * - txPrebuild
     * - prv
     * @returns {{txHex}}
     */
    OFCToken.prototype.signTransaction = function (params) {
        var txPrebuild = params.txPrebuild;
        var payload = txPrebuild.payload;
        var signatureBuffer = this.signMessage(params, payload);
        var signature = signatureBuffer.toString('hex');
        return { halfSigned: { payload: payload, signature: signature } };
    };
    return OFCToken;
}(Ofc));
module.exports = OFCToken;
//# sourceMappingURL=ofcToken.js.map