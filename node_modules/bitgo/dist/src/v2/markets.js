"use strict";
//
// Markets Object
// BitGo accessor to Bitcoin market data.
//
// Copyright 2015, BitGo, Inc.  All Rights Reserved.
//
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var common = require("../common");
var Promise = require("bluebird");
var co = Promise.coroutine;
//
// Constructor
//
var Markets = function (bitgo, baseCoin) {
    this.bitgo = bitgo;
    this.baseCoin = baseCoin;
};
/**
 * Get the latest price data
 * @param params {}
 * @param callback
 * @returns {*} an object containing price and volume data from the
 * current day in a number of currencies
 **/
Markets.prototype.latest = function latest(params, callback) {
    return co(function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = params || {};
                    common.validateParams(params, [], []);
                    return [4 /*yield*/, this.bitgo.get(this.baseCoin.url('/market/latest'))];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.body];
            }
        });
    }).call(this).asCallback(callback);
};
/**
 * Get yesterday's price data
 * @param params {}
 * @param callback
 * @returns {*} an object containing price and volume data from the
 * previous day in a number of currencies
 */
Markets.prototype.yesterday = function yesterday(params, callback) {
    return co(function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = params || {};
                    common.validateParams(params, [], []);
                    return [4 /*yield*/, this.bitgo.get(this.baseCoin.url('/market/yesterday'))];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.body];
            }
        });
    }).call(this).asCallback(callback);
};
/**
 * Get price data from up to 90 days prior to today
 * @param params { currencyName: the code for the desired currency, for example USD }
 * @param callback
 * @returns {*} an object containing average prices from a number of previous days
 */
Markets.prototype.lastDays = function lastDays(params, callback) {
    return co(function () {
        var days, res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    params = params || {};
                    common.validateParams(params, ['currencyName'], []);
                    days = !isNaN(parseInt(params.days, 10)) ? parseInt(params.days, 10) : 90;
                    if (days && days < 0) {
                        throw new Error('must use a non-negative number of days');
                    }
                    return [4 /*yield*/, this.bitgo.get(this.baseCoin.url('/market/last/' + days + '/' + params.currencyName))];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res.body];
            }
        });
    }).call(this).asCallback(callback);
};
module.exports = Markets;
//# sourceMappingURL=markets.js.map